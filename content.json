{"meta":{"title":"Jeongwook, IT Blog","subtitle":"배움과 생각 쌓기","description":"M.A in Business and Technology Management at KAIST","author":"Jeongwook, Kim","url":"http://jeongwookie.github.io"},"pages":[],"posts":[{"title":"마시는 링거, 링티","slug":"recommend-lingerwater","date":"2018-09-12T15:15:34.000Z","updated":"2018-09-12T15:46:22.247Z","comments":true,"path":"2018/09/13/recommend-lingerwater/","link":"","permalink":"http://jeongwookie.github.io/2018/09/13/recommend-lingerwater/","excerpt":"","text":"요즘따라 몸이 많이 피곤함을 느낀다. 커피를 마셔도 예전같이 빠릿빠릿하지 않고.. 격일로 운동을 간지 1달 조금 넘었는데 체력이 길러지기는 커녕 더 떨어진 것 같다. 그 와중에 와디즈를 보다가 무심코 발견한 아이템이 바로 마시는 링거, 링티 군의관들이 개발한 것이란다. 열사병으로 쓰러지는 군인들을 위해 개발했는데, 기사를 보니 군 장성들이 그렇게 좋아한단다. 좋은 건 바로 알아보는 그들이니.. 정말 괜찮을 것 같다는 생각이 ㅋㅋㅋ 분말 형태로, 간단하게 500ml 생수만 준비해서 타먹으면 끝! 공식 사이트에서 주문하려고 보니까 전용 생수통을 팔던데, 예뻐 보여서 같이 샀다. 링티 1 Box에 27,000원인데 기호식품이라고 생각하면 비싼 편이지만 아플 때 링거 맞은 것처럼 힘이 난다면 이정도 돈은 충분히 지불할 용의가 있었다. 최근에 속이 많이 아파서 정밀 검진도 받고, 밥을 제대로 먹지 못했기 때문에 링티가 더 간절하게 느껴졌다. 작업하면서 바로 타서 마셔보았다. 맛은 포카리스웨트에 레모나를 약간 탄 느낌이었다. 맛있지도, 맛없지도 않은 맛. 기분 탓인지 모르겠는데, 마시고 나니까 뭔가 너무 잠이 와서… 한숨 자고 왔다. 그런데 효과가 조금은 있다고 생각이 드는게, 오늘 밥을 아주 조금씩 먹어서 힘이 없었는데 조금씩 돌아오는 것이 느껴지더니 저녁에 운동까지 갔다와도 멀쩡하다! 아직 한번 밖에 마시지 않았지만, 첫 느낌이 좋다. 괜찮으면 부모님께도, 동생한테도 하나씩 사서 추석때 들고가야겠다. 링티 추천!! 판매 링크 : https://smartstore.naver.com/lingerwater","categories":[{"name":"Diary","slug":"Diary","permalink":"http://jeongwookie.github.io/categories/Diary/"},{"name":"추천 아이템","slug":"Diary/추천-아이템","permalink":"http://jeongwookie.github.io/categories/Diary/추천-아이템/"}],"tags":[{"name":"지칠때","slug":"지칠때","permalink":"http://jeongwookie.github.io/tags/지칠때/"},{"name":"링티","slug":"링티","permalink":"http://jeongwookie.github.io/tags/링티/"},{"name":"추천 아이템","slug":"추천-아이템","permalink":"http://jeongwookie.github.io/tags/추천-아이템/"}]},{"title":"리스트 자료형 다루기","slug":"list-operation","date":"2018-09-12T04:49:03.000Z","updated":"2018-09-12T08:09:51.927Z","comments":true,"path":"2018/09/12/list-operation/","link":"","permalink":"http://jeongwookie.github.io/2018/09/12/list-operation/","excerpt":"","text":"파이썬 강의 첫 날, 또 하나의 자주 쓰는 자료형을 배웠다. 리스트 (list)란 특정 값들을 순서 있게 저장하는 자료형이다. C와는 달리, 하나의 리스트 안에 숫자와 문자가 공존할 수 있더라. 앞서 배운 문자열처럼 리스트 또한 인덱싱과 슬라이싱을 할 수 있다. 하지만, 각각의 결과물에 대해 조심해야 할 필요가 있다. 123456789&gt;&gt;&gt; lst = [\"Python\",2,3,4,5]&gt;&gt;&gt; print(lst[0]) #lst의 첫번째 원소를 출력Python&gt;&gt;&gt; print(lst[1]) #lst의 두번째 원소를 출력2&gt;&gt;&gt; print(lst[1:]) #lst를 두번째 부터 끝까지 슬라이싱[2, 3, 4, 5]&gt;&gt;&gt; print(lst[0][0]) #lst의 첫번째 원소 안의 첫번째 원소P 위의 결과를 보면 특이한 점이 한 가지 보인다. 바로, 리스트를 인덱싱 한 결과값은 그 자리의 원소 (숫자)인 반면 리스트를 슬라이싱 한 결과값은 리스트로 반환되는 것이다! 리스트의 값을 수정하거나 삭제하고 싶은 경우가 있다. 문자열의 요소값을 바꿀수 없는 것과는 달리, 리스트의 값은 쉽게 바꿀 수 있다. 123456789101112&gt;&gt;&gt; a=[1,2,3,4,5]&gt;&gt;&gt; print(a)[1, 2, 3, 4, 5]&gt;&gt;&gt; a[0] = 100&gt;&gt;&gt; a[4] = \"Python\"&gt;&gt;&gt; print(a)[100, 2, 3, 4, Python]&gt;&gt;&gt; del a[0] #a의 첫번째 원소 삭제&gt;&gt;&gt; print(a)[2, 3, 4, Python] 위의 예시를 보면 알겠지만, 리스트의 요소값을 삭제하고 싶은 경우 del 함수를 사용하여 정확히 인덱싱 한 부분을 삭제할 수 있다. 리스트 또한 문자열과 마찬가지로 변수명 뒤에 ‘.’을 붙여서 관련 함수들을 사용할 수 있다. 자주 쓰이는 함수 몇 가지만 알아보자. 1. 요소 추가하기 (append) .append(x)는 리스트의 맨 마지막에 x를 추가시키는 함수이다.1234&gt;&gt;&gt; fruits = ['apple', 'banana', 'cherry']&gt;&gt;&gt; fruits.append(\"orange\")&gt;&gt;&gt; print(fruits)['apple', 'banana', 'cherry', 'orange'] append()를 사용할 경우 원본 data가 변형된다는 점에 주의해야 한다. 2. 리스트 정렬하기 (sort) .sort()는 리스트의 요소를 순서대로 정렬해 주는 함수이다.12345678&gt;&gt;&gt; a = [1, 4, 3, 2]&gt;&gt;&gt; a.sort()&gt;&gt;&gt; print(a)[1, 2, 3, 4]&gt;&gt;&gt; a.sort(reverse=True)&gt;&gt;&gt; print(a)[4, 3, 2, 1] 문자가 요소인 리스트의 경우, 기본적으로 제일 첫 글자의 순서대로 정렬해 준다. key값을 지정해 줌으로써 정렬 기준을 바꿀 수 있다. 12345678# A function that returns the length of the value:&gt;&gt;&gt; def myFunc(e): return len(e)&gt;&gt;&gt; cars = ['Ford', 'Mitsubishi', 'BMW', 'VW']&gt;&gt;&gt; cars.sort(key=myFunc)&gt;&gt;&gt; print(cars)['VW', 'BMW', 'Ford', 'Mitsubishi'] 3. 리스트 순서 뒤집기 (reverse) .reverse()는 리스트를 역순으로 뒤집는 함수이다.1234&gt;&gt;&gt; a = ['a', 'c', 'b']&gt;&gt;&gt; a.reverse()&gt;&gt;&gt; print(a)['b', 'c', 'a'] 4. 요소 끄집어내기 (pop) .pop(x)은 리스트의 x번째 요소를 반환하고 해당 요소는 리스트에서 삭제하는 함수이다. 주로 index로 요소를 찾고, 그 값을 반환하고 리스트에서 삭제를 원할 경우 사용한다. index로 요소를 찾고 단순히 제거를 원할 경우 del을 사용하고,index가 아닌 그 값으로 요소를 찾고 제거를 원할 경우 remove()를 사용한다. 후자의 경우 입력한 값이 리스트에 없는 경우 ValueError가 발생한다. 12345678910&gt;&gt;&gt; fruits = ['apple', 'banana', 'cherry']&gt;&gt;&gt; fruits.pop(1)&gt;&gt;&gt; print(fruits)['apple', 'cherry']&gt;&gt;&gt; a = [1,2,3]&gt;&gt;&gt; print(a.pop()) #index을 지정하지 않은 경우3 #리스트의 맨 마지막 요소를 반환&gt;&gt;&gt; print(a)[1, 2] 위에서 소개하지 않은 나머지 리스트와 관련된 함수들은 여기를 참고하면 된다. 특히 .append() 와 .pop() 은 자주 쓰이는 함수이다. 예를 들어 data stream을 append()를 이용해서 차례대로 받고, pop()을 통해서 제일 뒤부터 차례대로 뽑아서 처리하는 식으로 쓴다고 한다.","categories":[{"name":"Python","slug":"Python","permalink":"http://jeongwookie.github.io/categories/Python/"},{"name":"KAIST IT 강좌","slug":"Python/KAIST-IT-강좌","permalink":"http://jeongwookie.github.io/categories/Python/KAIST-IT-강좌/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://jeongwookie.github.io/tags/Python/"},{"name":"교육","slug":"교육","permalink":"http://jeongwookie.github.io/tags/교육/"},{"name":"KAIST","slug":"KAIST","permalink":"http://jeongwookie.github.io/tags/KAIST/"}]},{"title":"Format 함수로 정렬하기","slug":"code-alignment-using-format-function","date":"2018-09-11T14:38:47.000Z","updated":"2018-09-11T15:19:03.615Z","comments":true,"path":"2018/09/11/code-alignment-using-format-function/","link":"","permalink":"http://jeongwookie.github.io/2018/09/11/code-alignment-using-format-function/","excerpt":"","text":"첫 번째 시간에 배운 Format 함수로 정렬(Alignment)을 할 수 있다. 주로 출력물을 보기 좋게 정렬하고 싶을 때 많이 사용한다고 한다. Code Feature {:k&gt;10} 10칸 공간, 오른쪽 정렬, 공백을 k로 채우기 {:k&lt;10} 10칸 공간, 왼쪽 정렬, 공백을 k로 채우기 {:k^10} 10칸 공간, 가운데 정렬, 공백을 k로 채우기 아래의 예시 코드를 보자. 1234567891011# 10칸 공간, 2칸에 Hi 넣고 나머지는 공백, 왼쪽 정렬&gt;&gt;&gt; print(\"&#123;:&lt;10&#125; Jeongwook\".format(\"Hi\"))Hi Jeongwook# 10칸 공간, 2칸에 Hi 넣고 나머지는 공백, 오른쪽 정렬&gt;&gt;&gt; print(\"&#123;:&gt;10&#125; Jeongwook\".format(\"Hi\")) Hi Jeongwook# 10칸 공간, 2칸에 Hi 넣고 나머지는 공백, 가운데 정렬&gt;&gt;&gt; print(\"&#123;:^10&#125; Jeongwook\".format(\"Hi\")) Hi Jeongwook &lt;는 왼쪽 정렬, &gt;은 오른쪽 정렬, ^은 가운데 정렬임을 기억하자. 콜론(:) 바로 뒤에 채우고 싶은 문자나 숫자를 입력하면 된다. 아래와 같이 print 함수로 출력할때 예쁘게 구분하기 위해 사용한다. 123# 20칸 공간, 5칸에 Hello 넣고 나머지는 =으로 채움, 가운데 정렬&gt;&gt;&gt; print(\"&#123;:=^20&#125;\".format(\"Hello\"))=======Hello========","categories":[{"name":"Python","slug":"Python","permalink":"http://jeongwookie.github.io/categories/Python/"},{"name":"KAIST IT 강좌","slug":"Python/KAIST-IT-강좌","permalink":"http://jeongwookie.github.io/categories/Python/KAIST-IT-강좌/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://jeongwookie.github.io/tags/Python/"},{"name":"교육","slug":"교육","permalink":"http://jeongwookie.github.io/tags/교육/"},{"name":"개발","slug":"개발","permalink":"http://jeongwookie.github.io/tags/개발/"},{"name":"KAIST","slug":"KAIST","permalink":"http://jeongwookie.github.io/tags/KAIST/"}]},{"title":"첫번째 숙제","slug":"First-homework-python","date":"2018-09-11T08:27:10.000Z","updated":"2018-09-11T16:44:54.448Z","comments":true,"path":"2018/09/11/First-homework-python/","link":"","permalink":"http://jeongwookie.github.io/2018/09/11/First-homework-python/","excerpt":"","text":"1번 문제 : 슬라이싱 및 문자열 합치기 첫 번째 문제는 주어진 string을 “슬라이싱” 및 “문자열 합치기”를 사용해서 주어진 format으로 만드는 것이다. “20180108”을 “2018년 01월 08일”로 바꾸어 출력해 보자. 12345678&gt;&gt;&gt; a = \"20180108\"&gt;&gt;&gt; year = a[:4]&gt;&gt;&gt; month = a[4:6]&gt;&gt;&gt; date = a[6:]&gt;&gt;&gt; date_format = \"&#123;&#125;년 &#123;&#125;월 &#123;&#125;일\"&gt;&gt;&gt; print(date_format.format(year, month, date))2018년 01월 08일 2번 문제 : 나누기 및 나머지 구하기를 활용한 1번 문제 풀이 두 번째 문제는 1번 문제와 동일한 결과물을 “나누기” 및 “나머지 구하기”를 활용하여 출력하는 것이다. 1234567&gt;&gt;&gt; a = 20180108&gt;&gt;&gt; year = int(a/10000) #int로 정수화&gt;&gt;&gt; month = int((a%10000)/100) #int로 정수화&gt;&gt;&gt; date = (a%10000)%100&gt;&gt;&gt; print(\"&#123;0&#125;년 &#123;3&#125;&#123;1&#125;월 &#123;3&#125;&#123;2&#125;일\".format(year, month, date, 0))2018년 01월 08일 다른 방법도 있을텐데 그냥 0 자리를 만들고 그대로 format 함수 사용해서 채워넣었다. 3번 문제 : 슬라이싱 및 문자열 합치기 세 번째 문제는 주어진 문자열의 문자를 “슬라이싱” 및 “문자열 합치기”를 활용하여 바꾸는 것이다. “Hi Jeongwook” 을 “Hello Jeongwook” 으로 바꾸어 보자. 123456&gt;&gt;&gt; b = \"Hi Jeongwook\"&gt;&gt;&gt; say_hello = \"Hello \"&gt;&gt;&gt; result_statement = say_hello + b[3:]&gt;&gt;&gt; print(result_statement)\"Hello Jeongwook\" 4번 문제 : 원하는 문자를 Upper letter로 바꾸어 보기 네 번째 문제는 문자열을 입력 받은 후 첫 번째 문자와 마지막 문자만 대문자로 바꾸어 출력하는 것이다. 입력 받은 문자열을 슬라이싱 후 원하는 부분만 upper()을 적용한 후 다시 합치면 된다. 1234567&gt;&gt;&gt; input_statement = input()&gt;&gt;&gt; first_letter = input_statement[0].upper()&gt;&gt;&gt; last_letter = input_statement[-1].upper()&gt;&gt;&gt; middle_letter = input_statement[1:-1].lower()&gt;&gt;&gt; output_statement = first_letter + middle_letter + last_letter&gt;&gt;&gt; print(output_statement)","categories":[{"name":"Python","slug":"Python","permalink":"http://jeongwookie.github.io/categories/Python/"},{"name":"KAIST IT 강좌","slug":"Python/KAIST-IT-강좌","permalink":"http://jeongwookie.github.io/categories/Python/KAIST-IT-강좌/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://jeongwookie.github.io/tags/Python/"},{"name":"교육","slug":"교육","permalink":"http://jeongwookie.github.io/tags/교육/"},{"name":"개발","slug":"개발","permalink":"http://jeongwookie.github.io/tags/개발/"},{"name":"KAIST","slug":"KAIST","permalink":"http://jeongwookie.github.io/tags/KAIST/"}]},{"title":"문자열 자료형 다루기","slug":"Common-string-operation","date":"2018-09-10T14:30:06.000Z","updated":"2018-09-12T04:48:12.436Z","comments":true,"path":"2018/09/10/Common-string-operation/","link":"","permalink":"http://jeongwookie.github.io/2018/09/10/Common-string-operation/","excerpt":"","text":"첫번째 강의 시간에 배운 내용 중 주목해야 할 점은 format의 쓰임이었다. 예전에 C로 코딩할때는 %d, %f 등을 잘 찍어줘야 하는데, 파이썬은 그런게 없어도 잘되네? 기본적인 포맷은 아래와 같다. 1'&#123;&#125; &#123;&#125;'.format('one', 'two') 이렇게 치면 결과값이 “one two”로 나온다. (string) 내가 앞에서 순서를 지정할 수도 있다. 1'&#123;1&#125; &#123;0&#125;'.format('one', 'two') 결과값은 “two one” 이다. 자세한 내용은 PyFormat에서 확인할 수 있다. 이외에도 주로 문자열 자료형에 대해서 다루었다. 내용을 간단히 열거하면 아래와 같다. 문자열 더하기 및 곱하기1234&gt;&gt;&gt; a = \"I love \"&gt;&gt;&gt; b = \"Python!\"&gt;&gt;&gt; print(a+b)\"I love Python!\" 123456&gt;&gt;&gt; print(\"=\" * 20)&gt;&gt;&gt; print(\"Python is god\")&gt;&gt;&gt; print(\"=\" * 20)====================\"Python is god\"==================== 문자열 인덱싱 문자열 인덱싱이란, 말그대로 문자열에서 문자들에게 순서를 숫자로 매기는(indexing) 것이다.“파이썬은 0부터 숫자를 센다” 라는 사실만 주의하자.1234567&gt;&gt;&gt; string = \"Python\"&gt;&gt;&gt; string[0]'P'&gt;&gt;&gt; string[3]'h'&gt;&gt;&gt; string[-1]'n' 문자열 슬라이싱 문자열 슬라이싱이란, 주어진 문자열을 자르는 (slicing) 것이다. 내가 원하는 만큼 범위를 지정하면 딱 그만큼 잘라서 준다. 단, 범위를 지정할 때 끝은 포함하지 않음에 주의하자.1234567&gt;&gt;&gt; string = \"Python is king\"&gt;&gt;&gt; string[0:7]'Python'&gt;&gt;&gt; string[7:]' is king'&gt;&gt;&gt; string[:]'Python is king' 문자열 슬라이싱은 주어진 문자열을 수정하고 싶을 때 유용하게 사용할 수 있다.문자열의 요소값은 바꿀 수 있는 값이 아니기 때문에 (immutable: 불변의) 문자열 슬라이싱 후 더하는 방법을 사용한다.12345678# 예시: \"Pithon\" 을 \"Python\"으로 바꾸고 싶다!&gt;&gt;&gt; a = \"Pithon\"&gt;&gt;&gt; a[:1]'P'&gt;&gt;&gt; a[2:]'thon'&gt;&gt;&gt; a[:1] + 'y' + a[2:]'Python' 문자열 관련 함수들 자주 쓰이는 함수는, find (인덱스 알려주기) strip (공백 지우기) replace (문자열 바꾸기) split (문자열 나누기) 등이 있다. 자세한 내용은 점프투 파이썬 위키를 참고하자.","categories":[{"name":"Python","slug":"Python","permalink":"http://jeongwookie.github.io/categories/Python/"},{"name":"KAIST IT 강좌","slug":"Python/KAIST-IT-강좌","permalink":"http://jeongwookie.github.io/categories/Python/KAIST-IT-강좌/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://jeongwookie.github.io/tags/Python/"},{"name":"교육","slug":"교육","permalink":"http://jeongwookie.github.io/tags/교육/"},{"name":"KAIST","slug":"KAIST","permalink":"http://jeongwookie.github.io/tags/KAIST/"}]},{"title":"Github 블로그에 이미지 업로드하기","slug":"Github-Blog-image-upload","date":"2018-09-10T13:46:48.000Z","updated":"2018-09-11T14:17:00.174Z","comments":true,"path":"2018/09/10/Github-Blog-image-upload/","link":"","permalink":"http://jeongwookie.github.io/2018/09/10/Github-Blog-image-upload/","excerpt":"","text":"Github를 사용해서 블로그를 시작하려는데, 문제가 생겼다. 왜 이미지 업로드가 안되지? 분명히 source를 확인하고, deploy_git에 정상적으로 image가 업로드 되었음에도, 내 페이지는 그대로.. 이것저것 해보다가 다시 블로그를 새로고침했더니, 정상적으로 image가 올라가 있었다 -_- 내 짧은 지식과 검색으로 다음과 같은 결론을 얻었다. Github를 이용해서 블로그를 호스팅할 경우, 전송 속도가 매우 느려서 업로드 되는데 시간이 좀 걸린다. (약 3~4분) 되긴 되지만 답답하다. 다른 방법 없나? 구글링을 열심히 해보니, 놀랍게도 GitHub Help에서 issue로 등록해 놨더라. File attachments on issues and pull requests 위에 나와있는 움짤처럼 이미지를 끌어다가 네모에 넣고 기다리면, 이미지 링크가 생긴다. 이를 원하는 페이지에 붙여넣으면 끝!","categories":[{"name":"Github","slug":"Github","permalink":"http://jeongwookie.github.io/categories/Github/"}],"tags":[{"name":"개발","slug":"개발","permalink":"http://jeongwookie.github.io/tags/개발/"},{"name":"Giuhub","slug":"Giuhub","permalink":"http://jeongwookie.github.io/tags/Giuhub/"},{"name":"블로그","slug":"블로그","permalink":"http://jeongwookie.github.io/tags/블로그/"}]},{"title":"파이썬 시작하기","slug":"Start-learning-python","date":"2018-09-10T12:47:29.000Z","updated":"2018-09-11T14:17:07.755Z","comments":true,"path":"2018/09/10/Start-learning-python/","link":"","permalink":"http://jeongwookie.github.io/2018/09/10/Start-learning-python/","excerpt":"","text":"학교에서 주말마다 하는 IT 교육과정이 있다. 예전부터 파이썬을 혼자서 해보겠다고 책도 빌리고, 코드아카데미에서 몇번 끄젹여 봤었는데 시간이 잘 안나기도 하고 막상 시간이 나면 안했다.. 학부때 잠깐 EECS의 데이터마이닝 랩에서 근무 했었는데, 그때는 R을 써서 데이터를 읽어오고 간단하게 ANNOVAR 돌려보고 그랬다. C에 비해서는 대단히 직관적인 언어여서 금방금방 따라하긴 했는데 지금은 어떨까? 파이썬과 R이 Data Science 하면 제일 많이 떠오르는 언어라고 하는데, 예전보다 파이썬의 위상이 하늘을 찌를 정도로 올라가서.. 이제는 파이썬이 아무튼 대세다. 개인적으로 개발에 관심을 두기 전에도 대단히 잡다한 지식을 모으는 데에 관심이 있어서, 학부에서 화학을 전공하면서도 현대대수학과 같은 수학과 과목이랑, 양자역학, 세포생물학 및 세포물리학 등등 여기저기 돌아다녔다. 인문 수업들도 꽤나 들었고, 다양한 과목들을 수강하면서 놀라웠던 점은 하나의 현상을 보고, 이를 분석하는 방법이 너무너무 달랐다는 것이다. 예를 들어서, 수소의 오비탈을 수식으로 풀어내는 과정에 있어서 양자역학을 배울 때에는 수학적인 정의와 함께 수식 자체를 유도하는 데에 집중한 반면, 물리화학 및 양자화학에서는 적당히 하다 건너뛰고 오히려 수소 뒤의 헬륨, 리튬 등 다른 원소에 적용하고 해석하는 데에 지면을 더 할애하고 있었다. (내 성적을 보자면 양자역학과 같은 쪽이 더 취향에 맞는걸로..) 세포물리학은 더 놀라웠다. 생물 수업때 배운 시냅스의 구조 및 작용 원리에 대해서 물리학으로 접근해서, 운동방정식을 세우고 디멘션을 쪼개서 입자의 운동으로 설명하고 있었다. 여기서 약간의 insight를 얻었다. Data Science는 결국 주어진 데이터 뭉치에서 어떤 특정한 factor에 집중해서 남들이 보지 못한 문맥 속 이야기 를 끌어내는 것이 아닌가? 내가 가진 다양한 시각으로 데이터를 분석해서, 비즈니스의 혁신을 일으키고 싶은 것이 내 목표다. 그러기 위해서는 기본적인 개발 언어를 하나 제대로 익혀야겠지? 주중에는 학교 수업이랑 회사 일때문에 많이 바쁘다. 그와중에 매주 주말 6시간짜리 코스를 신청하다니.. 이젠 죽었다 ㅠㅠ 한번 열심히 해봐야지!","categories":[{"name":"Python","slug":"Python","permalink":"http://jeongwookie.github.io/categories/Python/"},{"name":"KAIST IT 강좌","slug":"Python/KAIST-IT-강좌","permalink":"http://jeongwookie.github.io/categories/Python/KAIST-IT-강좌/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://jeongwookie.github.io/tags/Python/"},{"name":"교육","slug":"교육","permalink":"http://jeongwookie.github.io/tags/교육/"},{"name":"KAIST","slug":"KAIST","permalink":"http://jeongwookie.github.io/tags/KAIST/"}]},{"title":"새 학기 시작","slug":"new-semester-start","date":"2018-08-28T04:00:38.000Z","updated":"2018-09-12T15:48:50.831Z","comments":true,"path":"2018/08/28/new-semester-start/","link":"","permalink":"http://jeongwookie.github.io/2018/08/28/new-semester-start/","excerpt":"","text":"남들보다 1주 정도 일찍 개강했습니다. 저번 학기에 블로그도 한번 열심히 해보자고 다짐했는데, 막상 학기가 바빠지고 일도 많아지다 보니 자연스럽게 관리가 안되더군요.. 이번에는 포스트 욕심을 많이 안내고 쉬는시간에 틈틈히 하나의 취미로 블로그를 관리하기로 마음 먹었습니다. 그리고 이번 학기부터 Google Analytics를 적용할 실습 공간이 필요한데, 이 블로그를 잘 관리하면 나중에는 적용할 만큼 커지지 않을까 하는 작은 바램이..ㅋㅋ 주로 학교에서 배운 것들이나 경험한 것들 위주로 포스트를 작성할 예정입니다. 또, 블로그를 Wordpress에서 GitHub를 사용한 Hexo로 옮겼습니다. 여러모로 셋팅전을 지글지글 굽고 있지만 시간이 해결해 줄것이라 생각하고.. 일단 글부터 적겠습니다! MarkDown 문법에 얼른 익숙해져야겠고, 여러가지 Plugin도 적용이 아직 미숙하여 제대로 작동하지 않을 수도 있습니다 ㅠㅠ 연락은 언제나 환영입니다 :)","categories":[{"name":"Diary","slug":"Diary","permalink":"http://jeongwookie.github.io/categories/Diary/"},{"name":"일기장","slug":"Diary/일기장","permalink":"http://jeongwookie.github.io/categories/Diary/일기장/"}],"tags":[{"name":"KAIST","slug":"KAIST","permalink":"http://jeongwookie.github.io/tags/KAIST/"},{"name":"일상","slug":"일상","permalink":"http://jeongwookie.github.io/tags/일상/"},{"name":"새학기","slug":"새학기","permalink":"http://jeongwookie.github.io/tags/새학기/"}]},{"title":"그로스 해커의 사고 방식","slug":"How-to-growth-hacking","date":"2018-03-31T16:09:18.000Z","updated":"2018-09-12T16:14:09.717Z","comments":true,"path":"2018/04/01/How-to-growth-hacking/","link":"","permalink":"http://jeongwookie.github.io/2018/04/01/How-to-growth-hacking/","excerpt":"","text":"구체적인 그로스 해킹 방법을 알아보기 전, 그로스 해커들이 가진 사고 방식을 이해할 필요가 있다. 그로스 해커가 생각하는 방식은, 어떻게 돈을 써야 가장 효과적인 한 방을 딱 맞는 사람에게 날릴 수 있는가? 이다. 그로스 해커라는 용어를 만든 Sean Ellis는 소비자의 인식에 신경 쓰는 전통적인 방식에서 벗어나 소비자를 확보하는 것에 집중하라고 조언한다. 우리 서비스의 고객은 데리고 와야 하는 존재이다. 좋은 아이디어로는 충분치 않다. 우리의 고객은 “확보되어야만” 하는 것이고, 성대한 잔치를 열어서 짠! 보여주는 기존의 서비스 오픈 방식은 적합하지 않다. 딱 맞는 사람들이 모여 있는 딱 맞는 장소를 조준 사격하는 것이 바로 그로스 해킹의 기본이다. 기존의 마케팅은 event를 정기적으로 열어 서비스 홍보를 하는 데에 주력하였다면, 우리는 그 사이클이 목표가 아니다. 딱 한번만 하면 된다. 최초의 고객이 유입되면, 그 후 우리가 해야할 것은 또 다른 고객 유형을 찾아 유입시키는 것이 아닌, 유입된 그들을 우리 편으로 만들어 “스스로 작동하는 마케팅 기계”로 만드는 것이다. 스타트업은 그로스 엔진을 달아야 한다.","categories":[{"name":"Github","slug":"Github","permalink":"http://jeongwookie.github.io/categories/Github/"}],"tags":[{"name":"Growth hacking","slug":"Growth-hacking","permalink":"http://jeongwookie.github.io/tags/Growth-hacking/"},{"name":"그로스 해킹","slug":"그로스-해킹","permalink":"http://jeongwookie.github.io/tags/그로스-해킹/"},{"name":"디지털 마케팅","slug":"디지털-마케팅","permalink":"http://jeongwookie.github.io/tags/디지털-마케팅/"},{"name":"스타트업","slug":"스타트업","permalink":"http://jeongwookie.github.io/tags/스타트업/"}]},{"title":"나의 취미","slug":"my-hobby","date":"2018-03-31T12:24:33.000Z","updated":"2018-09-12T15:49:28.848Z","comments":true,"path":"2018/03/31/my-hobby/","link":"","permalink":"http://jeongwookie.github.io/2018/03/31/my-hobby/","excerpt":"","text":"어떻게 하면 좋은 취미를 찾을 수 있을까? 재미만 있는 것이 아니라, 무언가 도움이 되는 지속가능한 취미를 가지고 싶다. 주중에 계속 일을 하며 학교도 다니고 있으니 시간이 많이 촉박하다. 그러나 주말에 조금 쉬는 시간을 가져도 막상 그 시간이 닥치면 할 것이 마땅찮다. 그래서 늦잠을 자다가 툴툴대며 카페 와서 다시 일을 하거나.. 책을 읽는다. 이 생활도 나쁘다고는 할 수 없지만, 주중에 받는 스트레스를 상쇄할 수가 없어서 계속 쌓이는 것 같은 느낌이다. 나 자신에 대해 어떻게 보상을 해야 할지 모르겠다. 원래 내가 좋아하고, 지금도 하고 있는 취미를 적어보면 게임 독서 ??? 뭐 적을게 없네… 게임도 나는 RPG 매니아인데, 더이상 할 게임이 없고 앞으로도 할만할 게임이 나올 것 같지 않다 ㅠㅠ (살려줘요) 하스스톤이나 오버워치도 하는데, 할때마다 스트레스가 더 쌓여서 주객전도가 된다. 운동. 하고 싶기도 하고 귀찮기도 하고, 무엇보다 헬스는 재미가 떨어진다. 계속 책만 보고 싶지도 않은데… 개발 공부도 하고 이것 저것 쌓아야 할 지식들은 많지만 학교와 회사 일을 다 하고 나면 의욕이 팍 떨어진다. 작년에 그렇게 바쁜 와중에서도 나를 버티게 하는 힘이 무엇이었나 생각해보면, 그냥 많은 사람들 앞에서 내 아이디어를 발표하고 공감을 이끌어내는 활동 자체가 너무 좋았던 것 같다. 그래서 내 취미는 어떡하지..? ㅋㅋ","categories":[{"name":"Diary","slug":"Diary","permalink":"http://jeongwookie.github.io/categories/Diary/"},{"name":"일기장","slug":"Diary/일기장","permalink":"http://jeongwookie.github.io/categories/Diary/일기장/"}],"tags":[{"name":"일상","slug":"일상","permalink":"http://jeongwookie.github.io/tags/일상/"},{"name":"고민","slug":"고민","permalink":"http://jeongwookie.github.io/tags/고민/"}]},{"title":"소비자로부터 출발하여 거꾸로 일하기","slug":"start-from-customer","date":"2018-03-29T14:45:33.000Z","updated":"2018-09-11T16:30:59.348Z","comments":true,"path":"2018/03/29/start-from-customer/","link":"","permalink":"http://jeongwookie.github.io/2018/03/29/start-from-customer/","excerpt":"","text":"신제품 개발 프로세스에서 아마존 (Amazon)은 새로운 접근법을 고안했다. 아마존의 임원인 Ian McAllister은 이를 소비자로부터 출발하여 거꾸로 일하기 (Working backwards from the customer) 라고 부른다. 먼저 새로운 계획을 세울 때, 내부에서는 이 잠재적인 프로젝트를 마치 막 끝낸 것처럼 공표하는 것으로 시작한다. 이것은 고객들에게도 전달되어, 새롭게 제공하는 기능이 고객들이 가지고 있던 문제를 얼마나 흥미진진하고 설득력 있는 방법으로 해결하는지 설명한다. 만약 공표한 내용이 실현되지 못하면 실현할 수 있을 때까지 초기 계획을 계속해서 수정한다. 이러한 프로세스는 팀이 신제품의 역량이 어디에 있어야 하는지, 특별한 장점이 무엇인지에 대해 정확히 집중할 수 있도록 한다. 이를 내가 현재 생각하는 분야의 사업에 대해 똑같은 프레임워크로 접근해 보자. 우리가 A라는 기능을 가진 App을 만들기로 계획한다고 하자. 우리는 A가 기존의 고객들이 가지고 있는 문제를 얼마나 흥미진진하고 설득력 있는 방법으로 해결할 수 있는지 설명할 수 있어야 할 것이다. 하지만, 설명만 할 수 있다고 해서 A가 정말 좋은 기능이라고 말하기에는 어렵지 않은가? 이론적으로 이해는 하지만, 실제 프로젝트 수행에 있어 얼마나 도움이 되는지는 잘 모르겠다.","categories":[{"name":"Growth Hacking","slug":"Growth-Hacking","permalink":"http://jeongwookie.github.io/categories/Growth-Hacking/"}],"tags":[{"name":"그로스 해킹","slug":"그로스-해킹","permalink":"http://jeongwookie.github.io/tags/그로스-해킹/"},{"name":"Growth Hacking","slug":"Growth-Hacking","permalink":"http://jeongwookie.github.io/tags/Growth-Hacking/"}]},{"title":"그로스 해커란?","slug":"What-is-growth-hacker","date":"2018-03-29T04:30:17.000Z","updated":"2018-09-11T15:39:30.590Z","comments":true,"path":"2018/03/29/What-is-growth-hacker/","link":"","permalink":"http://jeongwookie.github.io/2018/03/29/What-is-growth-hacker/","excerpt":"","text":"나는 틈틈이 라이언 홀리데이가 지은 ‘그로스 해킹’ 이라는 책을 읽고 있다. 이 책에 따르면 그로스 해커란, 전통적인 마케팅 표본을 버리고 검증 가능하고 추적 가능한, 그리고 확장 가능한 데이터를 바탕으로 회사의 급속 성장을 도모하는 사람이다. 전통적인 마케터가 제품을 놓고 누구에게, 어떻게 팔 것인지 고민하였다면, 그로스 해커가 하는 일은 ‘누구’와 ‘어디’ 보다는 과학적으로 더 다양하고 측정 가능한 방법에 집중하는 것이다. 예를 들어 전통적인 마케터가 회사의 브랜딩 (Branding)에 집중하였다면, 그로스 해커는 지표와 ROI (투자 대비 수익 효율, Return On Investment)를 기반으로 사고한다. 모든 그로스 해커의 궁극적인 목표는 자동으로, 영구히 지속되는 마케팅 기계를 만드는 것이다. 그로스 해킹은 도구라 하기 보다는 사고방식이다. – Aaron Ginn 최악의 마케팅 의사 결정은 바로 “아무도 원하지 않거나 필요로 하지 않는 제품을 가지고 시작하는 것”이다. 이를 그로스 해커는 정면으로 부정한다. 명백하게 잘못된 접근을 철저하게 배제한다. 이들은 맨 처음 마주하는 사람에게서 아이디어에 대한 폭발적인 반응을 이끌어 내지 못하면 제품, 넓게는 전체 사업이나 비즈니스 모델까지 전부 바뀔 수 있다고 생각한다. 전통적인 마케터는 시장의 반응이 그리 좋지 않을 때, 언제 원점으로 돌아가야 하는지에 대해서 제대로 고민한 적이 없다. 이런 생각 자체가 허용되지 않았으며 잘못된 제품 뒤에서 열심히 일할 뿐이었다. 에어비엔비 (AirBnB)는 2007년, 마루 위에 에어메트리스를 놓고 숙박하는 손님들에게 직접 만든 아침 식사를 대접하는 사업으로 시작했다. 이러한 가치 제안 (Value Proposition)은 나쁘지 않았지만, 특별하지 않은 평범한 것이었다. 하지만 창업자들은 이보다 더 많은 것을 원했다. 원점에서부터 다시 출발한 그들은, 유명한 디자인 컨퍼런스 기간에 호텔이 다 차서 방을 구할 수 없을 때 대안으로 제시하는 숙박 서비스로 자신들을 재정의했다. 이것은 초기에 잡은 시장보다는 명백히 낫다는 것이 증명되었는데, 여기서 그들은 아이디어의 확장성을 찾았다. 마침내 에어비엔비는 타겟을 약간 피벗 (Pivot)하여 호텔은 싫지만 그렇다고 호스텔이나 비좁은 방에서 고생하기는 싫은 여행객들을 사업 타깃으로 잡았다. 그리고 아침식사 제공이나 네트워킹 파트를 그들의 사업 영역에서 없앴다. 또한, 상상 가능한 모든 종류의 숙박 시설을 빌리고 예약하는 서비스로 자신들을 재정의했다. 우리가 현재 알고 있는 에어비엔비의 탄생이다. 그들이 첫번째 단계나 두번째 단계에서, 어떻게 하면 기존 서비스에 맞는 고객을 찾고 어떻게 팔지 고민하면서 작은 사업들을 붙여나가는 방법을 취할 수도 있었을 것이다. 하지만 그들은 원점에서부터 변화시키는 생각을 주저하지 않았다. 피봇은 그들이 할 수 있던 마케팅 의사 결정 중 최고였다. 그로스 해커는 프로그래머이자 마케터로써, 제품의 설계부터 고객 경험까지 모든 사이클에 대해 계획적으로 접근하고, 데이터를 수집하며, 이를 통한 전체적 의사결정을 하여 회사의 성장 (Growth)을 해킹 (Hacking)하는 사람이라고 이해가 된다.","categories":[{"name":"Growth Hacking","slug":"Growth-Hacking","permalink":"http://jeongwookie.github.io/categories/Growth-Hacking/"}],"tags":[{"name":"Growth hacking","slug":"Growth-hacking","permalink":"http://jeongwookie.github.io/tags/Growth-hacking/"},{"name":"그로스 해킹","slug":"그로스-해킹","permalink":"http://jeongwookie.github.io/tags/그로스-해킹/"},{"name":"디지털 마케팅","slug":"디지털-마케팅","permalink":"http://jeongwookie.github.io/tags/디지털-마케팅/"}]},{"title":"중요한 미팅을 다녀와서","slug":"after-meeting-1","date":"2018-03-27T13:10:11.000Z","updated":"2018-09-12T15:49:00.297Z","comments":true,"path":"2018/03/27/after-meeting-1/","link":"","permalink":"http://jeongwookie.github.io/2018/03/27/after-meeting-1/","excerpt":"","text":"어제는 밤을 꼬박 새고 아침 일찍 강남에 도착했다. 11시 선릉 미팅에 점심 식사 하고, 4시에 을지로 미팅, 그리고 저녁 7시까지 대전 복귀해서 수업 들어가는 매우 강행군 스케줄;; 그래도 오랜만에 움직이는 거라 정신 바짝 차리고 임했다. 여러 가지 이슈가 새로 생겨서 앞으로 더 바빠질 것 같다. 나름 깨달은 사실이 있다면, 내가 여러 사람 앞에서 피칭하는 것은 자신이 있어도 1:1로 설명은 잘 못한다는 것 짧게 보고해야 하는 자리인데도 미괄식으로 자꾸 말을 한다는 것 두 가지 모두 앞으로 고쳐나가야겠다…","categories":[{"name":"Diary","slug":"Diary","permalink":"http://jeongwookie.github.io/categories/Diary/"},{"name":"일기장","slug":"Diary/일기장","permalink":"http://jeongwookie.github.io/categories/Diary/일기장/"}],"tags":[{"name":"스타트업","slug":"스타트업","permalink":"http://jeongwookie.github.io/tags/스타트업/"},{"name":"일상","slug":"일상","permalink":"http://jeongwookie.github.io/tags/일상/"},{"name":"미팅","slug":"미팅","permalink":"http://jeongwookie.github.io/tags/미팅/"}]},{"title":"시작","slug":"Start","date":"2018-03-24T15:17:27.000Z","updated":"2018-09-12T15:17:29.057Z","comments":true,"path":"2018/03/25/Start/","link":"","permalink":"http://jeongwookie.github.io/2018/03/25/Start/","excerpt":"","text":"미루고 미루던 블로그를 이제서야 시작하기로 마음먹었습니다. 벌써 카이스트에 입학한지 1달이 지났는데 이제서야 움직이네요. 2017년은 제가 평생 기억해야 할 해입니다. 하지만 기록으로 남기지 않았더니, 점점 기억이 옅어지더라구요. 앞으로의 여정을 위해서, 꼭 기록을 남겨야겠다는 생각이 들었습니다. 편하게 제가 쓰고 싶은 주제들로 이곳을 채워나갈 계획입니다. 이야기를 나누실 분들은 언제나 환영입니다 :) Jeongwook, Kim","categories":[{"name":"Diary","slug":"Diary","permalink":"http://jeongwookie.github.io/categories/Diary/"},{"name":"일기장","slug":"Diary/일기장","permalink":"http://jeongwookie.github.io/categories/Diary/일기장/"}],"tags":[{"name":"블로그","slug":"블로그","permalink":"http://jeongwookie.github.io/tags/블로그/"},{"name":"일상","slug":"일상","permalink":"http://jeongwookie.github.io/tags/일상/"}]}]}